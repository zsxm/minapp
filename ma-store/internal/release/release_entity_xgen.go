// generated by xgen -- DO NOT EDIT
package release

import (
	"bytes"

	"gopkg.in/goyy/goyy.v0/data/entity"
	"gopkg.in/goyy/goyy.v0/data/schema"
	"gopkg.in/goyy/goyy.v0/util/jsons"
	"gopkg.in/goyy/goyy.v0/util/strings"
)

var (
	ENTITY             = schema.TABLE("se_release", "商店发布")
	ENTITY_ID          = ENTITY.PRIMARY("id", "标识")
	ENTITY_MEMO        = ENTITY.COLUMN("memo", "备注")
	ENTITY_CREATES     = ENTITY.COLUMN("creates", "创建机构")
	ENTITY_CREATER     = ENTITY.CREATER("creater", "创建人员")
	ENTITY_CREATED     = ENTITY.CREATED("created", "创建时间")
	ENTITY_MODIFIER    = ENTITY.MODIFIER("modifier", "更新人员")
	ENTITY_MODIFIED    = ENTITY.MODIFIED("modified", "更新时间")
	ENTITY_VERSION     = ENTITY.VERSION("version", "乐观锁")
	ENTITY_DELETION    = ENTITY.DELETION("deletion", "删除标志")
	ENTITY_ARTIFICAL   = ENTITY.COLUMN("artifical", "人造数据")
	ENTITY_HISTORY     = ENTITY.COLUMN("history", "历史数据")
	ENTITY_NAME        = ENTITY.COLUMN("name", "产品名称")
	ENTITY_VER         = ENTITY.COLUMN("ver", "产品版本")
	ENTITY_MOBILE      = ENTITY.COLUMN("mobile", "手机号码")
	ENTITY_URL         = ENTITY.COLUMN("url", "H5网址")
	ENTITY_EMAIL       = ENTITY.COLUMN("email", "联系邮箱")
	ENTITY_REWARD_NUM  = ENTITY.COLUMN("reward_num", "奖励数量")
	ENTITY_TASK_MONEY  = ENTITY.COLUMN("task_money", "任务金额")
	ENTITY_EXEC_CYCLE  = ENTITY.COLUMN("exec_cycle", "执行周期")
	ENTITY_TASK_REMARK = ENTITY.COLUMN("task_remark", "任务说明")
)

func NewEntity() *Entity {
	e := &Entity{}
	e.init()
	return e
}

func (me *Entity) Name() string {
	return me.name.Value()
}

func (me *Entity) SetName(v string) {
	me.name.SetValue(v)
}

func (me *Entity) Ver() string {
	return me.ver.Value()
}

func (me *Entity) SetVer(v string) {
	me.ver.SetValue(v)
}

func (me *Entity) Mobile() string {
	return me.mobile.Value()
}

func (me *Entity) SetMobile(v string) {
	me.mobile.SetValue(v)
}

func (me *Entity) Url() string {
	return me.url.Value()
}

func (me *Entity) SetUrl(v string) {
	me.url.SetValue(v)
}

func (me *Entity) Email() string {
	return me.email.Value()
}

func (me *Entity) SetEmail(v string) {
	me.email.SetValue(v)
}

func (me *Entity) RewardNum() int {
	return me.rewardNum.Value()
}

func (me *Entity) SetRewardNum(v int) {
	me.rewardNum.SetValue(v)
}

func (me *Entity) TaskMoney() float64 {
	return me.taskMoney.Value()
}

func (me *Entity) SetTaskMoney(v float64) {
	me.taskMoney.SetValue(v)
}

func (me *Entity) ExecCycle() string {
	return me.execCycle.Value()
}

func (me *Entity) SetExecCycle(v string) {
	me.execCycle.SetValue(v)
}

func (me *Entity) TaskRemark() string {
	return me.taskRemark.Value()
}

func (me *Entity) SetTaskRemark(v string) {
	me.taskRemark.SetValue(v)
}

func (me *Entity) init() {
	me.table = ENTITY
	me.initSetDict()
	me.initSetColumn()
	me.initSetDefault()
	me.initSetField()
	me.initSetExcel()
	me.initSetJson()
	me.initSetXml()
}

func (me *Entity) initSetDict() {
}

func (me *Entity) initSetColumn() {
	if t, ok := me.Sys.Type("id"); ok {
		t.SetColumn(ENTITY_ID)
	}
	if t, ok := me.Sys.Type("memo"); ok {
		t.SetColumn(ENTITY_MEMO)
	}
	if t, ok := me.Sys.Type("creates"); ok {
		t.SetColumn(ENTITY_CREATES)
	}
	if t, ok := me.Sys.Type("creater"); ok {
		t.SetColumn(ENTITY_CREATER)
	}
	if t, ok := me.Sys.Type("created"); ok {
		t.SetColumn(ENTITY_CREATED)
	}
	if t, ok := me.Sys.Type("modifier"); ok {
		t.SetColumn(ENTITY_MODIFIER)
	}
	if t, ok := me.Sys.Type("modified"); ok {
		t.SetColumn(ENTITY_MODIFIED)
	}
	if t, ok := me.Sys.Type("version"); ok {
		t.SetColumn(ENTITY_VERSION)
	}
	if t, ok := me.Sys.Type("deletion"); ok {
		t.SetColumn(ENTITY_DELETION)
	}
	if t, ok := me.Sys.Type("artifical"); ok {
		t.SetColumn(ENTITY_ARTIFICAL)
	}
	if t, ok := me.Sys.Type("history"); ok {
		t.SetColumn(ENTITY_HISTORY)
	}
	me.name.SetColumn(ENTITY_NAME)
	me.ver.SetColumn(ENTITY_VER)
	me.mobile.SetColumn(ENTITY_MOBILE)
	me.url.SetColumn(ENTITY_URL)
	me.email.SetColumn(ENTITY_EMAIL)
	me.rewardNum.SetColumn(ENTITY_REWARD_NUM)
	me.taskMoney.SetColumn(ENTITY_TASK_MONEY)
	me.execCycle.SetColumn(ENTITY_EXEC_CYCLE)
	me.taskRemark.SetColumn(ENTITY_TASK_REMARK)
}

func (me *Entity) initSetDefault() {
	if t, ok := me.Sys.Type("created"); ok {
		t.SetDefault("-62135596800")
	}
	if t, ok := me.Sys.Type("modified"); ok {
		t.SetDefault("-62135596800")
	}
}

func (me *Entity) initSetField() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.SetField(entity.DefaultField())
		}
	}
	me.name.SetField(entity.DefaultField())
	me.ver.SetField(entity.DefaultField())
	me.mobile.SetField(entity.DefaultField())
	me.url.SetField(entity.DefaultField())
	me.email.SetField(entity.DefaultField())
	me.rewardNum.SetField(entity.DefaultField())
	me.taskMoney.SetField(entity.DefaultField())
	me.execCycle.SetField(entity.DefaultField())
	me.taskRemark.SetField(entity.DefaultField())
}

func (me *Entity) initSetExcel() {
}

func (me *Entity) initSetJson() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.Field().SetJson(entity.NewJsonBy(c))
		}
	}
	me.name.Field().SetJson(entity.NewJsonBy("name"))
	me.ver.Field().SetJson(entity.NewJsonBy("ver"))
	me.mobile.Field().SetJson(entity.NewJsonBy("mobile"))
	me.url.Field().SetJson(entity.NewJsonBy("url"))
	me.email.Field().SetJson(entity.NewJsonBy("email"))
	me.rewardNum.Field().SetJson(entity.NewJsonBy("rewardNum"))
	me.taskMoney.Field().SetJson(entity.NewJsonBy("taskMoney"))
	me.execCycle.Field().SetJson(entity.NewJsonBy("execCycle"))
	me.taskRemark.Field().SetJson(entity.NewJsonBy("taskRemark"))
}

func (me *Entity) initSetXml() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.Field().SetXml(entity.NewXmlBy(c))
		}
	}
	me.name.Field().SetXml(entity.NewXmlBy("name"))
	me.ver.Field().SetXml(entity.NewXmlBy("ver"))
	me.mobile.Field().SetXml(entity.NewXmlBy("mobile"))
	me.url.Field().SetXml(entity.NewXmlBy("url"))
	me.email.Field().SetXml(entity.NewXmlBy("email"))
	me.rewardNum.Field().SetXml(entity.NewXmlBy("rewardNum"))
	me.taskMoney.Field().SetXml(entity.NewXmlBy("taskMoney"))
	me.execCycle.Field().SetXml(entity.NewXmlBy("execCycle"))
	me.taskRemark.Field().SetXml(entity.NewXmlBy("taskRemark"))
}

func (me Entity) New() entity.Interface {
	return NewEntity()
}

func (me *Entity) Get(column string) interface{} {
	switch column {
	case ENTITY_NAME.Name():
		return me.name.Value()
	case ENTITY_VER.Name():
		return me.ver.Value()
	case ENTITY_MOBILE.Name():
		return me.mobile.Value()
	case ENTITY_URL.Name():
		return me.url.Value()
	case ENTITY_EMAIL.Name():
		return me.email.Value()
	case ENTITY_REWARD_NUM.Name():
		return me.rewardNum.Value()
	case ENTITY_TASK_MONEY.Name():
		return me.taskMoney.Value()
	case ENTITY_EXEC_CYCLE.Name():
		return me.execCycle.Value()
	case ENTITY_TASK_REMARK.Name():
		return me.taskRemark.Value()
	}
	return me.Sys.Get(column)
}

func (me *Entity) GetPtr(column string) interface{} {
	switch column {
	case ENTITY_NAME.Name():
		return me.name.ValuePtr()
	case ENTITY_VER.Name():
		return me.ver.ValuePtr()
	case ENTITY_MOBILE.Name():
		return me.mobile.ValuePtr()
	case ENTITY_URL.Name():
		return me.url.ValuePtr()
	case ENTITY_EMAIL.Name():
		return me.email.ValuePtr()
	case ENTITY_REWARD_NUM.Name():
		return me.rewardNum.ValuePtr()
	case ENTITY_TASK_MONEY.Name():
		return me.taskMoney.ValuePtr()
	case ENTITY_EXEC_CYCLE.Name():
		return me.execCycle.ValuePtr()
	case ENTITY_TASK_REMARK.Name():
		return me.taskRemark.ValuePtr()
	}
	return me.Sys.GetPtr(column)
}

func (me *Entity) GetString(field string) string {
	switch strings.ToLowerFirst(field) {
	case "name":
		return me.name.String()
	case "ver":
		return me.ver.String()
	case "mobile":
		return me.mobile.String()
	case "url":
		return me.url.String()
	case "email":
		return me.email.String()
	case "rewardNum":
		return me.rewardNum.String()
	case "taskMoney":
		return me.taskMoney.String()
	case "execCycle":
		return me.execCycle.String()
	case "taskRemark":
		return me.taskRemark.String()
	}
	return me.Sys.GetString(field)
}

func (me *Entity) SetString(field, value string) error {
	switch strings.ToLowerFirst(field) {
	case "name":
		return me.name.SetString(value)
	case "ver":
		return me.ver.SetString(value)
	case "mobile":
		return me.mobile.SetString(value)
	case "url":
		return me.url.SetString(value)
	case "email":
		return me.email.SetString(value)
	case "rewardNum":
		return me.rewardNum.SetString(value)
	case "taskMoney":
		return me.taskMoney.SetString(value)
	case "execCycle":
		return me.execCycle.SetString(value)
	case "taskRemark":
		return me.taskRemark.SetString(value)
	}
	return me.Sys.SetString(field, value)
}

func (me *Entity) Table() schema.Table {
	return me.table
}

func (me *Entity) Type(column string) (entity.Type, bool) {
	switch column {
	case ENTITY_NAME.Name():
		return &me.name, true
	case ENTITY_VER.Name():
		return &me.ver, true
	case ENTITY_MOBILE.Name():
		return &me.mobile, true
	case ENTITY_URL.Name():
		return &me.url, true
	case ENTITY_EMAIL.Name():
		return &me.email, true
	case ENTITY_REWARD_NUM.Name():
		return &me.rewardNum, true
	case ENTITY_TASK_MONEY.Name():
		return &me.taskMoney, true
	case ENTITY_EXEC_CYCLE.Name():
		return &me.execCycle, true
	case ENTITY_TASK_REMARK.Name():
		return &me.taskRemark, true
	}
	return me.Sys.Type(column)
}

func (me *Entity) Column(field string) (schema.Column, bool) {
	switch strings.ToLowerFirst(field) {
	case "name":
		return ENTITY_NAME, true
	case "ver":
		return ENTITY_VER, true
	case "mobile":
		return ENTITY_MOBILE, true
	case "url":
		return ENTITY_URL, true
	case "email":
		return ENTITY_EMAIL, true
	case "rewardNum":
		return ENTITY_REWARD_NUM, true
	case "taskMoney":
		return ENTITY_TASK_MONEY, true
	case "execCycle":
		return ENTITY_EXEC_CYCLE, true
	case "taskRemark":
		return ENTITY_TASK_REMARK, true
	}
	return me.Sys.Column(field)
}

func (me *Entity) Columns() []schema.Column {
	return []schema.Column{
		ENTITY_ID,
		ENTITY_MEMO,
		ENTITY_CREATES,
		ENTITY_CREATER,
		ENTITY_CREATED,
		ENTITY_MODIFIER,
		ENTITY_MODIFIED,
		ENTITY_VERSION,
		ENTITY_DELETION,
		ENTITY_ARTIFICAL,
		ENTITY_HISTORY,
		ENTITY_NAME,
		ENTITY_VER,
		ENTITY_MOBILE,
		ENTITY_URL,
		ENTITY_EMAIL,
		ENTITY_REWARD_NUM,
		ENTITY_TASK_MONEY,
		ENTITY_EXEC_CYCLE,
		ENTITY_TASK_REMARK,
	}
}

func (me *Entity) Names() []string {
	return []string{
		"id",
		"memo",
		"creates",
		"creater",
		"created",
		"modifier",
		"modified",
		"version",
		"deletion",
		"artifical",
		"history",
		"name",
		"ver",
		"mobile",
		"url",
		"email",
		"rewardNum",
		"taskMoney",
		"execCycle",
		"taskRemark",
	}
}

func (me *Entity) Value() *Entity {
	return me
}

func (me *Entity) Validate() error {
	return nil
}

func (me *Entity) JSON() string {
	var b bytes.Buffer
	b.WriteString("{")
	b.WriteString(`"id":"` + jsons.Format(me.GetString("id")) + `"`)
	b.WriteString(`,"memo":"` + jsons.Format(me.GetString("memo")) + `"`)
	b.WriteString(`,"creates":"` + jsons.Format(me.GetString("creates")) + `"`)
	b.WriteString(`,"creater":"` + jsons.Format(me.GetString("creater")) + `"`)
	b.WriteString(`,"created":` + me.GetString("created"))
	b.WriteString(`,"modifier":"` + jsons.Format(me.GetString("modifier")) + `"`)
	b.WriteString(`,"modified":` + me.GetString("modified"))
	b.WriteString(`,"version":` + me.GetString("version"))
	b.WriteString(`,"deletion":` + me.GetString("deletion"))
	b.WriteString(`,"artifical":` + me.GetString("artifical"))
	b.WriteString(`,"history":` + me.GetString("history"))
	b.WriteString(`,"name":"` + jsons.Format(me.GetString("name")) + `"`)
	b.WriteString(`,"ver":"` + jsons.Format(me.GetString("ver")) + `"`)
	b.WriteString(`,"mobile":"` + jsons.Format(me.GetString("mobile")) + `"`)
	b.WriteString(`,"url":"` + jsons.Format(me.GetString("url")) + `"`)
	b.WriteString(`,"email":"` + jsons.Format(me.GetString("email")) + `"`)
	b.WriteString(`,"rewardNum":` + me.GetString("rewardNum"))
	b.WriteString(`,"taskMoney":` + me.GetString("taskMoney"))
	b.WriteString(`,"execCycle":"` + jsons.Format(me.GetString("execCycle")) + `"`)
	b.WriteString(`,"taskRemark":"` + jsons.Format(me.GetString("taskRemark")) + `"`)
	b.WriteString("}")
	return b.String()
}

func (me *Entity) ExcelColumns() []string {
	return nil
}
